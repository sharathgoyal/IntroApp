/* eslint-disable walmart/typescript/unified-signatures */
declare module 'http-proxy' {
  import * as net from 'net';
  import * as http from 'http';
  import * as events from 'events';
  import * as url from 'url';
  import * as stream from 'stream';

  type ProxyTargetUrl = string | url.Url | {host: string; port: number};

  type ErrorCallback = (
    err: Error,
    req: http.IncomingMessage,
    res: http.ServerResponse,
    target?: ProxyTargetUrl,
  ) => void;

  declare class Server extends events.EventEmitter {
    /**
     * Creates the proxy server with specified options.
     * @param options - Config object passed to the proxy
     */
    public constructor(options?: Server.ServerOptions);

    /**
     * Creates the proxy server with specified options.
     * @param options Config object passed to the proxy
     * @returns Proxy object with handlers for `ws` and `web` requests
     */
    public static createProxyServer(options?: Server.ServerOptions): Server;

    /**
     * Creates the proxy server with specified options.
     * @param options Config object passed to the proxy
     * @returns Proxy object with handlers for `ws` and `web` requests
     */
    public static createServer(options?: Server.ServerOptions): Server;

    /**
     * Creates the proxy server with specified options.
     * @param options Config object passed to the proxy
     * @returns Proxy object with handlers for `ws` and `web` requests
     */
    public static createProxy(options?: Server.ServerOptions): Server;

    /**
     * Used for proxying regular HTTP(S) requests
     * @param req - Client request.
     * @param res - Client response.
     * @param options - Additionnal options.
     */
    public web(
      req: http.IncomingMessage,
      res: http.ServerResponse,
      options?: Server.ServerOptions,
      callback?: ErrorCallback,
    ): void;

    /**
     * Used for proxying regular HTTP(S) requests
     * @param req - Client request.
     * @param socket - Client socket.
     * @param head - Client head.
     * @param options - Additionnal options.
     */
    public ws(
      req: http.IncomingMessage,
      socket: net.Socket,
      head: Buffer,
      options?: Server.ServerOptions,
      callback?: ErrorCallback,
    ): void;

    /**
     * A function that wraps the object in a webserver, for your convenience
     * @param port - Port to listen on
     */
    public listen(port: number): Server;

    /**
     * A function that closes the inner webserver and stops listening on given port
     */
    public close(callback?: () => void): void;

    public addListener(event: string, listener: () => void): this;
    public on(event: string, listener: () => void): this;
    public on(event: 'error', listener: ErrorCallback): this;
    public on(
      event: 'start',
      listener: (
        req: http.IncomingMessage,
        res: http.ServerResponse,
        target: ProxyTargetUrl,
      ) => void,
    ): this;
    public on(
      event: 'proxyReq',
      listener: (
        proxyReq: http.ClientRequest,
        req: http.IncomingMessage,
        res: http.ServerResponse,
        options: Server.ServerOptions,
      ) => void,
    ): this;
    public on(
      event: 'proxyRes',
      listener: (
        proxyRes: http.IncomingMessage,
        req: http.IncomingMessage,
        res: http.ServerResponse,
      ) => void,
    ): this;
    public on(
      event: 'proxyReqWs',
      listener: (
        proxyReq: http.ClientRequest,
        req: http.IncomingMessage,
        socket: net.Socket,
        options: Server.ServerOptions,
        head: Buffer,
      ) => void,
    ): this;
    public on(
      event: 'econnreset',
      listener: (
        err: Error,
        req: http.IncomingMessage,
        res: http.ServerResponse,
        target: ProxyTargetUrl,
      ) => void,
    ): this;
    public on(
      event: 'end',
      listener: (
        req: http.IncomingMessage,
        res: http.ServerResponse,
        proxyRes: http.IncomingMessage,
      ) => void,
    ): this;
    public on(
      event: 'close',
      listener: (
        proxyRes: http.IncomingMessage,
        proxySocket: net.Socket,
        proxyHead: Buffer,
      ) => void,
    ): this;

    public once(event: string, listener: () => void): this;
    public removeListener(event: string, listener: () => void): this;
    public removeAllListeners(event?: string): this;
    public getMaxListeners(): number;
    public setMaxListeners(n: number): this;
    public listeners(event: string): (() => void)[];
    public emit(event: string, ...args: unknown[]): boolean;
    public listenerCount(type: string): number;
  }

  declare namespace Server {
    interface ServerOptions {
      /** URL string to be parsed with the url module. */
      target?: ProxyTargetUrl;
      /** URL string to be parsed with the url module. */
      forward?: ProxyTargetUrl;
      /** Object to be passed to http(s).request. */
      agent?: unknown;
      /** Object to be passed to https.createServer(). */
      ssl?: unknown;
      /** If you want to proxy websockets. */
      ws?: boolean;
      /** Adds x- forward headers. */
      xfwd?: boolean;
      /** Verify SSL certificate. */
      secure?: boolean;
      /** Explicitly specify if we are proxying to another proxy. */
      toProxy?: boolean;
      /** Specify whether you want to prepend the target's path to the proxy path. */
      prependPath?: boolean;
      /** Specify whether you want to ignore the proxy path of the incoming request. */
      ignorePath?: boolean;
      /** Local interface string to bind for outgoing connections. */
      localAddress?: boolean;
      /** Changes the origin of the host header to the target URL. */
      changeOrigin?: boolean;
      /** specify whether you want to keep letter case of response header key */
      preserveHeaderKeyCase?: boolean;
      /** Basic authentication i.e. 'user:password' to compute an Authorization header. */
      auth?: string;
      /** Rewrites the location hostname on (301 / 302 / 307 / 308) redirects, Default: null. */
      hostRewrite?: string;
      /** Rewrites the location host/ port on (301 / 302 / 307 / 308) redirects based on requested host/ port.Default: false. */
      autoRewrite?: boolean;
      /** Rewrites the location protocol on (301 / 302 / 307 / 308) redirects to 'http' or 'https'.Default: null. */
      protocolRewrite?: string;
      /** rewrites domain of set-cookie headers. */
      cookieDomainRewrite?: false | string | {[oldDomain: string]: string};
      /** rewrites path of set-cookie headers. Default: false */
      cookiePathRewrite?: false | string | {[oldPath: string]: string};
      /** object with extra headers to be added to target requests. */
      headers?: {[header: string]: string};
      /** Timeout (in milliseconds) when proxy receives no response from target. Default: 120000 (2 minutes) */
      proxyTimeout?: number;
      /** Timeout (in milliseconds) for incoming requests */
      timeout?: number;
      /** Specify whether you want to follow redirects. Default: false */
      followRedirects?: boolean;
      /** If set to true, none of the webOutgoing passes are called and it's your responsibility to appropriately return the response by listening and acting on the proxyRes event */
      selfHandleResponse?: boolean;
      /** Buffer */
      buffer?: stream.Stream;
    }
  }

  export = Server;
}
